const toggleBtn = document.getElementById('toggleBtn');
const statusEl = document.getElementById('status');
const ipInfoBlock = document.getElementById('ip-info');
const prevIP = document.getElementById('prev-ip');
const currIP = document.getElementById('curr-ip');

// –≠–ª–µ–º–µ–Ω—Ç—ã UI –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
const connectionStatus = document.getElementById('connection-status');
const pingResult = document.getElementById('ping-result');
const nextCheckTimer = document.getElementById('next-check-timer');

// –í—ã–±–æ—Ä —Ç–∏–ø–∞ –ø—Ä–æ–∫—Å–∏
const proxyTypeSelect = document.getElementById('proxyTypeSelect');

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫
document.querySelectorAll('.tab').forEach(tab => {
  tab.addEventListener('click', () => {
    const target = tab.getAttribute('data-tab');

    // –£–¥–∞–ª–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–ª–∞—Å—Å—ã
    document.querySelectorAll('.tab').forEach(t => t.classList.remove('active'));
    document.querySelectorAll('.tab-content').forEach(c => c.classList.add('hidden'));

    // –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –Ω—É–∂–Ω—É—é –≤–∫–ª–∞–¥–∫—É
    tab.classList.add('active');
    document.getElementById(target).classList.remove('hidden');
    document.getElementById(target).classList.add('active');
  });
});

// –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
chrome.storage.local.get(['proxyEnabled', 'proxyType'], ({ proxyEnabled, proxyType }) => {
  updateUI(proxyEnabled);
  proxyTypeSelect.value = proxyType || 'http';
});

// –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∏–ø –ø—Ä–æ–∫—Å–∏
proxyTypeSelect.addEventListener('change', () => {
  const selectedType = proxyTypeSelect.value;
  chrome.storage.local.set({ proxyType: selectedType });
});

// –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –ø—Ä–æ–∫—Å–∏
toggleBtn.addEventListener('click', () => {
  chrome.storage.local.get(['proxyEnabled', 'proxyType'], ({ proxyEnabled, proxyType }) => {
    const newState = !proxyEnabled;
    chrome.storage.local.set({ proxyEnabled: newState });

    if (newState) {
      let scheme = proxyType === 'socks5' ? 'socks5' : 'http';
      let port = proxyType === 'socks5' ? 1080 : 1609;

      chrome.proxy.settings.set({
        value: {
          mode: "fixed_servers",
          rules: {
            singleProxy: {
              scheme: scheme,
              host: "185.125.101.148", // <-- –ó–ê–ú–ï–ù–ò –ù–ê –°–í–û–ô –ü–†–û–ö–°–ò
              port: port
            },
            bypassList: ["localhost"]
          }
        },
        scope: "regular"
      }, () => {
        updateUI(true);
        updateIPInfo(); // –ø–æ–∫–∞–∑–∞—Ç—å IP

        // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–µ–º–µ–¥–ª–µ–Ω–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
        chrome.runtime.sendMessage({ action: "runHealthCheckNow" }, () => {
          console.log('[Popup] –ó–∞–ø—Ä–æ—à–µ–Ω–∞ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞');
        });
      });
    } else {
      chrome.proxy.settings.clear({ scope: "regular" }, () => {
        updateUI(false);
        ipInfoBlock.classList.add("hidden");

        // === –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≤—ã–∫–ª—é—á–µ–Ω–∏–∏ ===
        chrome.runtime.sendMessage({ action: "proxyDisabled" });
      });
    }
  });
});

function updateUI(enabled) {
  statusEl.textContent = enabled ? "–°—Ç–∞—Ç—É—Å: –≤–∫–ª—é—á–µ–Ω–æ" : "–°—Ç–∞—Ç—É—Å: –æ—Ç–∫–ª—é—á–µ–Ω–æ";
  toggleBtn.textContent = enabled ? "–û—Ç–∫–ª—é—á–∏—Ç—å" : "–í–∫–ª—é—á–∏—Ç—å";

  if (!enabled) {
    connectionStatus.textContent = '–æ—Ç–∫–ª—é—á–µ–Ω–æ';
    connectionStatus.className = '';
    pingResult.textContent = '-';
    nextCheckTimer.textContent = '-';
  }
}

async function getCurrentIP() {
  try {
    const res = await fetch('https://api.ipify.org?format=json');
    const data = await res.json();
    return data.ip;
  } catch (e) {
    return "–æ—à–∏–±–∫–∞";
  }
}

async function updateIPInfo() {
  const current = await getCurrentIP();

  chrome.storage.local.get(['lastIP'], (res) => {
    const previous = res.lastIP || "–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω";
    prevIP.textContent = previous;
    currIP.textContent = current;
    ipInfoBlock.classList.remove("hidden");

    chrome.storage.local.set({ lastIP: current });
  });
}

// –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ background
function requestBackgroundData() {
  chrome.runtime.sendMessage({ action: "getProxyHealth" }, (response) => {
    if (response && response.status) {
      connectionStatus.textContent = response.status;
      pingResult.textContent = response.ping + ' –º—Å';

      if (response.status === '–°—Ç–∞–±–∏–ª—å–Ω–æ') {
        connectionStatus.className = '';
      } else if (response.status === '–ü—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è...') {
        connectionStatus.className = 'connection-checking';
      } else {
        connectionStatus.className = 'connection-bad';
      }

      if (response.nextCheckIn !== undefined) {
        let timeLeft = Math.max(0, Math.floor(response.nextCheckIn / 1000));
        const minutes = Math.floor(timeLeft / 60);
        const seconds = timeLeft % 60;
        nextCheckTimer.textContent = `${minutes}:${seconds.toString().padStart(2, '0')}`;
      }
    }
  });
}

// –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã
setInterval(requestBackgroundData, 2000);
requestBackgroundData();

// === –î–æ–±–∞–≤–ª–µ–Ω–æ: –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∏–Ω–≥–∞ –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø—Ä–æ–∫—Å–∏ –≤–∫–ª—é—á—ë–Ω) ===
function fetchLivePing() {
  chrome.storage.local.get(['proxyEnabled'], ({ proxyEnabled }) => {
    if (!proxyEnabled) {
      pingResult.textContent = '-';
      return;
    }

    chrome.runtime.sendMessage({ action: "getPingNow" }, (response) => {
      if (response && response.ping !== undefined) {
        const pingText = response.ping !== null ? `${response.ping} –º—Å` : '‚Äì';
        pingResult.textContent = pingText;
      }
    });
  });
}
// –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
async function checkForUpdate() {
    try {
        const response = await fetch('https://risaro.github.io/garage-proxy/version.json');
        const remote = await response.json();

        const currentVersion = chrome.runtime.getManifest().version;
        const latestVersion = remote.version;

        if (compareVersions(currentVersion, latestVersion) < 0) {
            document.getElementById('updateNotice').style.display = 'block';
            document.getElementById('downloadLink').href = remote.download_url;
            document.getElementById('changelog').innerText = remote.changelog;
        }
    } catch (e) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:", e);
    }
}

function compareVersions(v1, v2) {
    const parts1 = v1.split('.').map(Number);
    const parts2 = v2.split('.').map(Number);

    for (let i = 0; i < 3; i++) {
        if (parts1[i] > parts2[i]) return 1;
        if (parts1[i] < parts2[i]) return -1;
    }
    return 0;
}

// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
document.getElementById('updateNotice').innerHTML = `
    <h3>–î–æ—Å—Ç—É–ø–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ</h3>
    <p id="changelog"></p>
    <a id="downloadLink" href="#" target="_blank">üì• –°–∫–∞—á–∞—Ç—å –Ω–æ–≤—É—é –≤–µ—Ä—Å–∏—é</a>
`;

checkForUpdate();
setInterval(fetchLivePing, 5000);
fetchLivePing(); // —Å—Ä–∞–∑—É –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ—á